name: Deploy to AWS ECS

on:
  push:
    branches: 
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  IAM_GITHUB_OIDC_ROLE: ${{ vars.IAM_GITHUB_OIDC_ROLE }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_URI: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.IAM_GITHUB_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag the Docker image
        id: build-image
        run: |
          IMAGE=${{ env.ECR_URI }}:${{ env.IMAGE_TAG }}
          docker build -t $IMAGE .
          docker tag $IMAGE ${{ env.ECR_URI }}:latest
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Push image to Amazon ECR
        run: |
          docker push ${{ env.ECR_URI }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.ECR_URI }}:latest

      - name: Fill in the new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          # Instead of a file path, the JSON is embedded here
          task-definition: |
            {
              "family": "my-nodejs-task",
              "networkMode": "awsvpc",
              "executionRoleArn": "arn:aws:iam::604100153348:role/PecsTaskExecutionRole",
              "taskRoleArn": "arn:aws:iam::604100153348:role/PecsTaskRole",
              "cpu": "512",
              "memory": "2048",
              "requiresCompatibilities": [
                "FARGATE"
              ],
              "containerDefinitions": [
                {
                  "name": "my-app",
                  "image": "${{ env.ECR_URI }}:${{ env.IMAGE_TAG }}",
                  "cpu": 0,
                  "essential": true,
                  "portMappings": [
                    {
                      "containerPort": 8080,
                      "hostPort": 8080
                    }
                  ],
                  "logConfiguration": {
                    "logDriver": "awslogs",
                    "options": {
                      "awslogs-group": "/ecs/my-nodejs-task",
                      "awslogs-create-group": "true",
                      "awslogs-region": "ap-southeast-1",
                      "awslogs-stream-prefix": "ecs"
                    }
                  }
                }
              ]
            }
          container-name: "my-app"
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: "my-nodejs-task-service"
          cluster: "my-ecs-cluster"
          wait-for-service-stability: true
